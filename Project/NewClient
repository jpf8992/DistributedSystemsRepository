#####################################################
#Client Proxy
class Proxy  
  def run port
    begin
	  @server = TCPServer.open('localhost', port )
	  puts "Client Proxy Server Started with port #{port}"
      loop{	#Loop until client disconnects (e.g. a system shut-down)
			
			#Ask user to input their request for further processing
			user_request = gen_request 
			puts "Action Specified: #{user_request}"
						
			#Handle Request as long as its valid!
			if user_request!= "INVALID"
				puts "Handling Request"
				dir_socket = TCPSocket.open('localhost',2010)   # Socket to listen on port 2010 - Default Dir Server Port
				dir_socket.puts user_request
				
				#handle_request user_request
			
			else
				puts "Request Invalid,\n Please Specify Valid Command!"
			end
      }.join
# CTRL-C
    rescue Interrupt
      puts 'Got Interrupt..'
    # Ensure that we release the socket on errors
    ensure
      if @socket
        @socket.close
        puts 'Socked closed..'
      end
      puts 'Quitting.'
    end
  end
  
  def handle_request to_client
	puts "In Handle"
	message = to_client.gets
    #puts "Request #{message}"
    
	#Send Message to Directory Server that you want to Read a file
	if message.include?"read"
		puts "Processing Read Request"
		to_dir_server = TCPSocket.open('localhost', 2010 )
		to_dir_server.puts "I want to find a file"
		dir_response = to_dir_server.gets
		puts "Directory Server Response: #{dir_response}"
		to_dir_server.close
	end
	
    
  end
  
  #Handle user Requests and return an interpretable instruction for the proxy
  def gen_request 
	puts "Please Specify Command\n"
	puts "Available Commands:\n <Read~filename>...\n<Write~filename>...\n<Close~filename>...\n<Open~filename>\n"
	puts "Specify Command:  "
	input_message = gets.downcase	#take user input from keyboard -> convert lowercase
    file = input_message.partition('=').last	#extract file from user input
    
	if input_message.include?"read"
		puts "Processing Read Request"
		message = "READ"
		
	elsif input_message.include?"write"
		puts "Processing Write Request"
		message = "WRITE"
	
	elsif input_message.include?"open"
		puts "Processing Open Request"
		message = "OPEN"
		
	elsif input_message.include?"close"
		puts "Processing Close Request"
		message = "CLOSE"	
	else
		#puts"Message cannot be interpreted!"
		message = "INVALID"
	end
	return	message+"_"+file
	
  end
  
end


#New Client
require 'socket'      # Sockets are in standard library
hostname = 'localhost'
port = 2050
#Create Client Proxy to Handle Communications
Proxy.new.run port






