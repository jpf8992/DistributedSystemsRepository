#####################################################
#Client Proxy
class Proxy  
  def run port
    begin
	  @server = TCPServer.open('localhost', port )
	  puts "Client Proxy Server Started with port #{port}"
      loop{	#Loop until client disconnects (e.g. a system shut-down)
			
			#Ask user to input their request for further processing
			user_request = gen_request 
			puts "Action Specified: #{user_request}"
						
			#Handle Request as long as its valid!
			if !(user_request.include?"INVALID")
				puts "Handling Request"
				dir_socket = TCPSocket.open('localhost',2010)   # Socket to listen on port 2010 - Default Dir Server Port
				dir_socket.puts user_request
				
				#Hanlde response from Dir server - should be location of file(if it exists)
				dir_message = handle_request dir_socket	#pass socket into requests handler
				dir_socket.close
				puts "Dir message : #{dir_message}"
				
				#Query the Storage Server that holds your desired file
				if !(dir_message.include?"INVALID")
					puts "Establishing Connection with Storage Server ..."
					storage_port = dir_message[-5..-1].delete!("\n")
					puts "Server Port: #{storage_port}"
					storage_socket = TCPSocket.open('localhost',storage_port)
					
					#determine the file the client wants to access
					filename = user_request.partition('_') [2]
					puts "filename: #{filename}"
					storage_socket.puts filename
					
				else
					puts "Directory Response: No Valid File!"
				end
			else
				puts "Request Invalid,\n Please Specify Valid Command!"
			end
      }#.join
	# CTRL-C
    rescue Interrupt
      puts 'Got Interrupt..'
    # Ensure that we release the socket on errors
    ensure
      if @socket
        @socket.close
        puts 'Socked closed..'
      end
      puts 'Quitting.'
    end
  end
  
  def handle_request socket		#pass the socket stream
	puts "In Handle"
	message = socket.gets		#get message
    
		if message.include?"No Such File or Directory"
			puts "File Does Not Exist"
			return "INVALID"
		else
			puts "Dir Server Response: #{message}"
			return message
		end
	end
  
  #Handle user Requests and return an interpretable instruction for the proxy
  def gen_request 
	puts "\nPlease Specify Command\n"
	puts "Available Commands:\n <Read~filename>...\n<Write~filename>...\n<Close~filename>...\n<Open~filename>\n"
	puts "Specify Command:  "
	input_message = gets.downcase	#take user input from keyboard -> convert lowercase
    file = input_message.partition('=').last	#extract file from user input
    
	if input_message.include?"read"
		puts "Processing Read Request"
		message = "READ"
		
	elsif input_message.include?"write"
		puts "Processing Write Request"
		message = "WRITE"
	
	elsif input_message.include?"open"
		puts "Processing Open Request"
		message = "OPEN"
		
	elsif input_message.include?"close"
		puts "Processing Close Request"
		message = "CLOSE"	
	elsif (file=="")
		message = "INVALID"
	else
		#puts"Message cannot be interpreted!"
		message = "INVALID"
	end
	return	message+"_"+file
	
  end
  
end


#New Client
require 'socket'      # Sockets are in standard library
hostname = 'localhost'
port = 3000
#Create Client Proxy to Handle Communications
Proxy.new.run port






