#####################################################
#Client Proxy
class Proxy  
  def run port
    begin
	  @server = TCPServer.open('localhost', port )
      # Start our server to handle connections (will raise things on errors)
      #@socket = TCPServer.new port
      puts "Client Server Started with port #{port}"
      # Handle every request in another thread
      loop{
			Thread.start(@server.accept) do | client |
				puts "Handling Request"
				handle_request client
			end
      }.join
# CTRL-C
    rescue Interrupt
      puts 'Got Interrupt..'
    # Ensure that we release the socket on errors
    ensure
      if @socket
        @socket.close
        puts 'Socked closed..'
      end
      puts 'Quitting.'
    end
  end
  
  def handle_request to_client
	
	
	puts "In Handle"
	message = to_client.gets
    #puts "Request #{message}"
    
	#Send Message to Directory Server that you want to Read a file
	if message.include?"read"
		puts "Processing Read Request"
		to_dir_server = TCPSocket.open('localhost', 2010 )
		to_dir_server.puts "I want to find a file"
		dir_response = to_dir_server.gets
		puts "Directory Server Response: #{dir_response}"
		to_dir_server.close
	end
	
    verb    = request_line[/^\w+/]
    url     = request_line[/^\w+\s+(\S+)/, 1]
    version = request_line[/HTTP\/(1\.\d)\s*$/, 1]
    uri     = URI::parse url
    
    # Show what got requested
    puts((" %4s "%verb) + url)
    
    to_server = TCPSocket.new(uri.host, (uri.port.nil? ? 80 : uri.port))
    to_server.write("#{verb} #{uri.path}?#{uri.query} HTTP/#{version}\r\n")
    
    content_len = 0
    
    loop do      
      line = to_client.readline
      
      if line =~ /^Content-Length:\s+(\d+)\s*$/
        content_len = $1.to_i
      end
      
      # Strip proxy headers
      if line =~ /^proxy/i
        next
      elsif line.strip.empty?
        to_server.write("Connection: close\r\n\r\n")
        
        if content_len >= 0
          to_server.write(to_client.read(content_len))
        end
        
        break
      else
        to_server.write(line)
      end
    end
    
    buff = ""
    loop do
      to_server.read(4048, buff)
      to_client.write(buff)
      break if buff.size < 4048
    end
    
    # Close the sockets
    to_client.close
    to_server.close
  end
  
end










#New Client

require 'socket'      # Sockets are in standard library

hostname = 'localhost'
port = 2050

#Create Client Proxy to Handle Communications
Proxy.new.run 2050

s = TCPSocket.open(hostname, port)
puts "Opened port #{port}"



loop do
	puts "Please Specify Command\n"
	puts "Available Commands: <Read~filename>...<Write~filename>...<Close~filename>...<Open~filename>"
	instruction = gets.chomp
	s.puts instruction
end

s.close               # Close the socket when done






